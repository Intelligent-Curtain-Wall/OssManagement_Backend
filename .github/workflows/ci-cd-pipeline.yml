name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Create oss config file
        run: |
          cat > src/main/resources/oss-config.json <<EOF
          [
            {
              "UserName": "corrosion-detection",
              "Password": "${{ secrets.CORROSION_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.CORROSION_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.CORROSION_DETECTION_AKSC }}"
            },
            {
              "UserName": "crack-detection",
              "Password": "${{ secrets.CRACK_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.CRACK_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.CRACK_DETECTION_AKSC }}"
            },
            {
              "UserName": "flatness-detection",
              "Password": "${{ secrets.FLATNESS_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.FLATNESS_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.FLATNESS_DETECTION_AKSC }}"
            },
            {
              "UserName": "mobile-data",
              "Password": "${{ secrets.MOBILE_DATA_PW }}",
              "AccessKeyId": "${{ secrets.MOBILE_DATA_AKID }}",
              "AccessKeySecret": "${{ secrets.MOBILE_DATA_AKSC }}"
            },
            {
              "UserName": "modeling-communication",
              "Password": "${{ secrets.MODELING_COMMUNICATION_PW }}",
              "AccessKeyId": "${{ secrets.MODELING_COMMUNICATION_AKID }}",
              "AccessKeySecret": "${{ secrets.MODELING_COMMUNICATION_AKSC }}"
            },
            {
              "UserName": "oss-management",
              "Password": "${{ secrets.OSS_MANAGEMENT_PW }}",
              "AccessKeyId": "${{ secrets.OSS_MANAGEMENT_AKID }}",
              "AccessKeySecret": "${{ secrets.OSS_MANAGEMENT_AKSC }}"
            },
            {
              "UserName": "resilience-assessment",
              "Password": "${{ secrets.RESILIENCE_ASSESSMENT_PW }}",
              "AccessKeyId": "${{ secrets.RESILIENCE_ASSESSMENT_AKID }}",
              "AccessKeySecret": "${{ secrets.RESILIENCE_ASSESSMENT_AKSC }}"
            },
            {
              "UserName": "spalling-detection",
              "Password": "${{ secrets.SPALLING_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.SPALLING_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.SPALLING_DETECTION_AKSC }}"
            },
            {
              "UserName": "stain-detection",
              "Password": "${{ secrets.STAIN_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.STAIN_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.STAIN_DETECTION_AKSC }}"
            },
            {
              "UserName": "vibration-detection",
              "Password": "${{ secrets.VIBRATION_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.VIBRATION_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.VIBRATION_DETECTION_AKSC }}"
            }
          ]
          EOF

      - name: Create ssh config file
        run: |
          cat > src/main/resources/ssh-config.properties <<EOF
          [
            host=${{ secrets.SSH_HOST }}
            port=${{ secrets.SSH_PORT }}
            username=${{ secrets.SSH_USERNAME }}
            password=${{ secrets.SSH_PASSWORD }}
          ]
          EOF

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: docker.io/minmuslin/intelligent-curtain-wall:oss-management