name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.WORKFLOW_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Clone secrets repository
        run: |
          git clone git@github.com:Intelligent-Curtain-Wall/.secrets.git
          if [ ! -d ".secrets" ]; then
            echo "Error: .secrets directory not found!"
            exit 1
          fi

      - name: Read secrets and set environment variables
        run: |
          export DOCKER_USERNAME=$(cat .secrets/DOCKER_USERNAME)
          export DOCKER_PASSWORD=$(cat .secrets/DOCKER_PASSWORD)
          export MATPOOL_SSH_PORT=$(cat .secrets/MATPOOL_SSH_PORT)
          export MATPOOL_SSH_HOST=$(cat .secrets/MATPOOL_SSH_HOST)
          export MATPOOL_SSH_USERNAME=$(cat .secrets/MATPOOL_SSH_USERNAME)
          export MATPOOL_SSH_PASSWORD=$(cat .secrets/MATPOOL_SSH_PASSWORD)
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV
          echo "MATPOOL_SSH_PORT=$MATPOOL_SSH_PORT" >> $GITHUB_ENV
          echo "MATPOOL_SSH_HOST=$MATPOOL_SSH_HOST" >> $GITHUB_ENV
          echo "MATPOOL_SSH_USERNAME=$MATPOOL_SSH_USERNAME" >> $GITHUB_ENV
          echo "MATPOOL_SSH_PASSWORD=$MATPOOL_SSH_PASSWORD" >> $GITHUB_ENV

      - name: Create oss config file
        run: |
          cat > src/main/resources/oss-config.json <<EOF
          [
            {
              "UserName": "corrosion-detection",
              "Password": "${{ secrets.CORROSION_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.CORROSION_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.CORROSION_DETECTION_AKSC }}"
            },
            {
              "UserName": "crack-detection",
              "Password": "${{ secrets.CRACK_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.CRACK_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.CRACK_DETECTION_AKSC }}"
            },
            {
              "UserName": "flatness-detection",
              "Password": "${{ secrets.FLATNESS_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.FLATNESS_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.FLATNESS_DETECTION_AKSC }}"
            },
            {
              "UserName": "mobile-data",
              "Password": "${{ secrets.MOBILE_DATA_PW }}",
              "AccessKeyId": "${{ secrets.MOBILE_DATA_AKID }}",
              "AccessKeySecret": "${{ secrets.MOBILE_DATA_AKSC }}"
            },
            {
              "UserName": "modeling-communication",
              "Password": "${{ secrets.MODELING_COMMUNICATION_PW }}",
              "AccessKeyId": "${{ secrets.MODELING_COMMUNICATION_AKID }}",
              "AccessKeySecret": "${{ secrets.MODELING_COMMUNICATION_AKSC }}"
            },
            {
              "UserName": "oss-management",
              "Password": "${{ secrets.OSS_MANAGEMENT_PW }}",
              "AccessKeyId": "${{ secrets.OSS_MANAGEMENT_AKID }}",
              "AccessKeySecret": "${{ secrets.OSS_MANAGEMENT_AKSC }}"
            },
            {
              "UserName": "resilience-assessment",
              "Password": "${{ secrets.RESILIENCE_ASSESSMENT_PW }}",
              "AccessKeyId": "${{ secrets.RESILIENCE_ASSESSMENT_AKID }}",
              "AccessKeySecret": "${{ secrets.RESILIENCE_ASSESSMENT_AKSC }}"
            },
            {
              "UserName": "spalling-detection",
              "Password": "${{ secrets.SPALLING_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.SPALLING_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.SPALLING_DETECTION_AKSC }}"
            },
            {
              "UserName": "stain-detection",
              "Password": "${{ secrets.STAIN_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.STAIN_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.STAIN_DETECTION_AKSC }}"
            },
            {
              "UserName": "vibration-detection",
              "Password": "${{ secrets.VIBRATION_DETECTION_PW }}",
              "AccessKeyId": "${{ secrets.VIBRATION_DETECTION_AKID }}",
              "AccessKeySecret": "${{ secrets.VIBRATION_DETECTION_AKSC }}"
            }
          ]
          EOF

      - name: Create ssh config file
        run: |
          cat > src/main/resources/ssh-config.properties <<EOF
          [
            host=${{ env.MATPOOL_SSH_HOST }}
            port=${{ env.MATPOOL_SSH_PORT }}
            username=${{ env.MATPOOL_SSH_USERNAME }}
            password=${{ env.MATPOOL_SSH_PASSWORD }}
          ]
          EOF

      - name: Create oss config file
        run: |
          cat > src/main/resources/oss-config.properties <<EOF
          [
            oss.endpoint=${{ secrets.OSS_ENDPOINT }}
            oss.bucket=${{ secrets.OSS_BUCKET }}
            oss.accessKeyId=${{ secrets.OSS_ACCESS_KEY_ID }}
            oss.accessKeySecret=${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ]
          EOF

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: docker.io/minmuslin/intelligent-curtain-wall:oss-management